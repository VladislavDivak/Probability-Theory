### Excersize 1 ###
"""
Даны значения величины заработной платы заемщиков банка (zp)
и значения их поведенческого кредитного скоринга (ks):
zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
Посчитать коэффициент линейной регрессии при заработной плате (zp),
используя градиентный спуск (без intercept)
"""
import numpy as np

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

num = len(zp)
zp = zp.reshape(len(zp),1)
ks = ks.reshape(len(ks),1)

def mse_(B1,y=ks,X=zp,n=num):
    return np.sum((B1*X-y)**2)/n

alpha = 0.000001
B1 = 1
for i in range (1001):
    B1 -=alpha*(2/num)*np.sum((B1*zp-ks)*zp)
    if i%100 == 0:
        print(f'Iteration: {i}, B1={B1}, MSE = {mse_(B1)}')
"""
Iteration: 0, B1=1.1347302, MSE = 368017.9491755833
Iteration: 100, B1=5.598920289974488, MSE = 57682.67406321302
Iteration: 200, B1=5.872024146706, MSE = 56521.22156616817
Iteration: 300, B1=5.8887317050891275, MSE = 56516.874745129535
Iteration: 400, B1=5.8897538162759355, MSE = 56516.858476833426
Iteration: 500, B1=5.8898163455368975, MSE = 56516.85841594815
Iteration: 600, B1=5.889820170862877, MSE = 56516.85841572027
Iteration: 700, B1=5.889820404883214, MSE = 56516.85841571941
Iteration: 800, B1=5.889820419199778, MSE = 56516.8584157194
Iteration: 900, B1=5.889820420075618, MSE = 56516.85841571941
Iteration: 1000, B1=5.8898204201291975, MSE = 56516.8584157194
"""
